{"version":3,"sources":["factoryModules/Gameboard.js","factoryModules/Ship.js","factoryModules/ComputerAI.js","displayComponents/DisplayGameboard.js","displayComponents/DisplayShipYard.js","App.js","index.js"],"names":["Gameboard","boardYaxis","fullBoard","map","Xele","Yele","placedShips","placeShip","ship","indexY","indexX","fullPosition","shipsFullPos","slice","length","Error","undefined","some","position","shipCoords","includes","push","receiveAttack","foundShip","find","splice","hit","placedShipsSunk","every","isSunk","Ship","shipLength","shipHit","hitCoords","ComputerAI","humanGB","compGB","fleet","autoPlaceShips","randomX","Math","floor","random","randomY","err","placeFleet","attackOpp","availableAttacks","flat","filter","coord","attackPos","DisplayGameboard","board","attack","dropPlace","boardOwner","placedShipsPositions","setColor","boardArea","backgroundColor","className","onDragOver","e","preventDefault","onDrop","boardArray","id","onClick","style","uniqid","DisplayShipYard","shipLenCheck","shipLenData","draggable","onMouseDown","App","useState","setHumanGB","cpuGB","setCpuGB","allShipsPlaced","setShipLength","Array","fill","setShipLenData","startGame","setStartGame","gameOver","setGameOver","cpu","target","yCoord","parseInt","xCoord","alert","message","console","log","checkGameOver","checkHuman","checkCPU","window","location","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.618079d0.chunk.js","sourcesContent":["const Gameboard = () => {\n    const boardXaxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    const boardYaxis = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    const fullBoard = boardXaxis.map((Xele) => {\n        return boardYaxis.map((Yele) => `${Xele}${Yele}`)\n    })\n\n    const placedShips = []\n\n    const checkShipPositionValid = (fullPosition) => {\n        if (fullPosition === undefined) {\n            return false\n        } else {\n            let check = placedShips.map((ship) => {\n                return fullPosition.some((position) => ship.shipCoords.includes(position))\n            })\n            return check.includes(true) ? true : false\n        }\n    }\n\n    const placeShip = (ship, indexY, indexX) => {\n        const shipsFullPos = fullBoard[indexY].slice(indexX, indexX + ship.length)\n\n        if (indexX + ship.length > 10) {\n            throw new Error(\"Ship Position OverBoard!\");\n        } else if (checkShipPositionValid(shipsFullPos)) {\n            throw new Error(\"Ship Position Already Taken!\");\n        } else {\n            ship.shipCoords = shipsFullPos\n            placedShips.push(ship)\n        }\n    }\n\n    const receiveAttack = (indexY, indexX) => {\n        const foundShip = placedShips.find((ship) => ship.shipCoords.includes(fullBoard[indexY][indexX]))\n\n        if (fullBoard[indexY][indexX] === 'Hit' || fullBoard[indexY][indexX] === 'Miss') {\n            throw new Error('Already Attacked Position')\n        }\n        else if (foundShip === undefined) {\n            return fullBoard[indexY].splice(indexX, 1, 'Miss')\n        } else {\n            foundShip.hit(fullBoard[indexY][indexX])\n            return fullBoard[indexY].splice(indexX, 1, 'Hit')\n        }\n    }\n\n    const placedShipsSunk = () => {\n        return placedShips.every((ship) => ship.isSunk())\n    }\n\n    return { fullBoard, placedShips, placeShip, receiveAttack, placedShipsSunk }\n}\n\nexport default Gameboard","const Ship = (shipLength) => {\n    const length = shipLength\n    const shipHit = []\n    let shipCoords;\n\n    const hit = (hitCoords) => {\n        shipHit.push(hitCoords)\n    }\n\n    const isSunk = () => {\n        return shipHit.length === shipLength ? true : false\n    }\n\n    return { length, shipHit, shipCoords, hit, isSunk }\n}\n\nexport default Ship","import Ship from '../factoryModules/Ship'\n\nconst ComputerAI = (humanGB, compGB) => {\n\n    const fleet = [Ship(5), Ship(4), Ship(3), Ship(2), Ship(1)]\n\n    const placeFleet = () => {\n        fleet.map((ship) => {\n            return autoPlaceShips(ship)\n        })\n    }\n\n    //recursive function to re-try placing ship if error is thrown --note: could blow stack but unlikely--\n    const autoPlaceShips = (ship) => {\n        let randomX = Math.floor(Math.random() * 10)\n        let randomY = Math.floor(Math.random() * (10 - ship.length))\n        try {\n            compGB.placeShip(ship, randomX, randomY)\n        }\n        catch (err) {\n            autoPlaceShips(ship)\n        }\n    }\n\n    const attackOpp = () => {\n        let availableAttacks = humanGB.fullBoard.flat().filter((coord) => coord !== 'Miss' && coord !== 'Hit')\n        let attackPos = Math.floor(Math.random() * availableAttacks.length)\n        humanGB.receiveAttack(availableAttacks[attackPos][0], availableAttacks[attackPos][1])\n        return availableAttacks[attackPos]\n    }\n\n    return { fleet, placeFleet, attackOpp }\n}\n\n\n\nexport default ComputerAI","import './styles/DisplayGameboard.css'\nimport uniqid from 'uniqid'\n\nconst DisplayGameboard = ({ board, attack, dropPlace, boardOwner }) => {\n    const placedShipsPositions = board.placedShips.map((ship) => ship.shipCoords).flat()\n\n    function setColor(boardArea) {\n        if (boardArea === 'Hit') {\n            return ({ backgroundColor: \"#e63946\" })\n        } else if (boardArea === 'Miss') {\n            return ({ backgroundColor: \"#4361ee\" })\n        } else if (placedShipsPositions.includes(boardArea) && boardOwner === 'human') {\n            return ({ backgroundColor: \"#2a9d8f\" })\n        }\n    }\n    return (\n        < div className=\"gameboard\" onDragOver={(e) => e.preventDefault()} onDrop={dropPlace}>\n            {board.fullBoard.map((boardArray) => {\n                return (\n                    boardArray.map((boardArea) => {\n                        return (\n                            <div key={uniqid()} id={boardArea} onClick={attack} className=\"boardAreaDiv\" style={setColor(boardArea)}>\n\n                            </div>\n                        )\n                    })\n                )\n            })}\n        </div >\n    )\n}\n\nexport default DisplayGameboard","import './styles/DisplayShipYard.css'\nimport uniqid from 'uniqid'\n\nconst DisplayShipYard = ({ shipLenCheck, shipLenData }) => {\n    return (\n        <div className='shipYard' draggable='true' onMouseDown={shipLenCheck}>\n            {shipLenData.map(() => {\n                return (\n                    <div key={uniqid()} className='ship' id={shipLenData.length}>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default DisplayShipYard","import { useState } from 'react';\nimport Gameboard from '../src/factoryModules/Gameboard'\nimport Ship from '../src/factoryModules/Ship'\nimport ComputerAI from '../src/factoryModules/ComputerAI'\nimport DisplayGameboard from './displayComponents/DisplayGameboard';\nimport DisplayShipYard from './displayComponents/DisplayShipYard';\nimport './displayComponents/styles/App.css'\n\nfunction App() {\n  const [humanGB, setHumanGB] = useState(() => Gameboard())\n  const [cpuGB, setCpuGB] = useState(() => Gameboard())\n  const [allShipsPlaced] = useState(humanGB.placedShips)\n\n  const [shipLength, setShipLength] = useState(undefined)\n  const [shipLenData, setShipLenData] = useState(Array(5).fill(1))\n\n  const [startGame, setStartGame] = useState(false)\n  const [gameOver, setGameOver] = useState(false)\n  const cpu = ComputerAI(humanGB, cpuGB)\n\n  const start = () => {\n    setCpuGB({ ...cpuGB }, cpu.placeFleet())\n    setStartGame(true)\n  }\n\n  const attack = (e) => {\n    let coord = e.target.id\n    let yCoord = parseInt(coord[0])\n    let xCoord = parseInt(coord[1])\n\n    try {\n      setHumanGB({ ...humanGB }, humanGB.fullBoard)\n      setCpuGB({ ...cpuGB }, cpuGB.receiveAttack(yCoord, xCoord))\n      cpu.attackOpp()\n      checkGameOver(humanGB, cpuGB)\n    } catch (err) {\n      alert('Already Attacked Position Try Again!')\n    }\n  }\n\n  const shipLenCheck = (e) => {\n    setShipLength(parseInt(e.target.id))\n  }\n\n  const dropPlace = (e) => {\n    try {\n      let coord = e.target.id\n      let yCoord = parseInt(coord[0])\n      let xCoord = parseInt(coord[1])\n\n      setHumanGB({ ...humanGB }, humanGB.placeShip(Ship(shipLength), yCoord, xCoord))\n      setShipLenData(Array(shipLenData.length - 1).fill(1))\n    } catch (err) {\n      alert(err.message)\n    }\n    console.log(e.target)\n  }\n\n  const checkGameOver = (checkHuman, checkCPU) => {\n    if (checkHuman.placedShipsSunk()) {\n      return setGameOver('Lose')\n    } else if (checkCPU.placedShipsSunk()) {\n      return setGameOver('Win')\n    }\n  }\n\n  const playAgain = () => {\n    window.location.reload();\n  }\n\n  return (\n    <div>\n      <h1 id=\"title\">BattleShip</h1>\n\n      {!gameOver ?\n        allShipsPlaced.length < 5\n          ? <div className='activeBoards'>\n            <DisplayGameboard board={humanGB} dropPlace={dropPlace} boardOwner={'human'} />\n            <div>\n              <h2>Place Ship {shipLenData.length}: </h2>\n              <DisplayShipYard shipLenCheck={shipLenCheck} shipLenData={shipLenData} />\n            </div>\n          </div>\n\n          : startGame\n\n            ? <div className='activeBoards'>\n              <DisplayGameboard board={humanGB} dropPlace={dropPlace} boardOwner={'human'} />\n              <DisplayGameboard board={cpuGB} attack={attack} />\n            </div>\n\n            : <div className='activeBoards'>\n              <DisplayGameboard board={humanGB} dropPlace={dropPlace} boardOwner={'human'} />\n              <button onClick={start}>Start Game</button>\n            </div>\n        : <div>\n          <h1>GAME OVER! You {gameOver}</h1>\n          <button onClick={playAgain}>Play Again</button>\n        </div>\n      }\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}